{{- if .Values.backend.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: backend
    tier: backend
    {{- include "rhesis.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      app: backend
      tier: backend
  template:
    metadata:
      labels:
        app: backend
        tier: backend
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.podSecurityContext.runAsUser }}
        runAsGroup: {{ .Values.podSecurityContext.runAsGroup }}
        {{- if .Values.podSecurityContext.fsGroupChangePolicy }}
        fsGroupChangePolicy: {{ .Values.podSecurityContext.fsGroupChangePolicy }}
        {{- end }}
      {{- end }}
      containers:
        - name: backend
          image: "{{ .Values.images.backend.repository }}:{{ .Values.images.backend.tag }}"
          imagePullPolicy: {{ .Values.images.backend.pullPolicy | default .Values.global.imagePullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.containerSecurityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{ .Values.containerSecurityContext.runAsNonRoot }}
            runAsUser: {{ .Values.containerSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.containerSecurityContext.runAsGroup }}
            {{- if .Values.containerSecurityContext.capabilities }}
            capabilities:
              {{- toYaml .Values.containerSecurityContext.capabilities | nindent 14 }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.backend.service.targetPort }}
              name: http
          envFrom:
            - configMapRef:
                name: {{ .Values.secrets.configMaps.existingConfigMap }}
            - secretRef:
                name: {{ .Values.secrets.existingSecret }}
          env:
            # Construct database URL from individual components + secrets
            - name: SQLALCHEMY_DATABASE_URL
              value: "postgresql://$(SQLALCHEMY_DB_USER):$(SQLALCHEMY_DB_PASSWORD)@$(SQLALCHEMY_DB_HOST):$(SQLALCHEMY_DB_PORT)/$(SQLALCHEMY_DB_NAME)"
            # Construct Redis URLs from individual components + secrets
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/0"
            - name: BROKER_URL
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/0"
            - name: CELERY_RESULT_BACKEND
              value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/1"
            {{- if .Values.backend.env }}
            {{- range .Values.backend.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.backend.service.targetPort }}
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.backend.service.targetPort }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 5
{{- end }}
