#!/bin/bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Function to display help
show_help() {
    echo -e "${CYAN}"
    echo "  ____  _   _ _____ ____ ___ ____  "
    echo " |  _ \| | | | ____/ ___|_ _/ ___| "
    echo " | |_) | |_| |  _| \___ \| |\___ \ "
    echo " |  _ <|  _  | |___ ___) | | ___) |"
    echo " |_| \_\_| |_|_____|____/___|____/ "
    echo -e "${NC}"
    echo ""
    echo -e "${WHITE}Rhesis CLI - Development Server Manager${NC}"
    echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo -e "  ${GREEN}./rh backend start${NC}   - Start the backend server"
    echo -e "  ${GREEN}./rh frontend start${NC}  - Start the frontend server"
    echo -e "  ${GREEN}./rh frontend test${NC}   - Run frontend tests"
    echo -e "  ${GREEN}./rh docs start${NC}      - Start the documentation server"
    echo -e "  ${GREEN}./rh worker start${NC}    - Start the Celery worker"
    echo -e "  ${GREEN}./rh help${NC}            - Show this help message"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  ${BLUE}./rh backend start${NC}"
    echo -e "  ${BLUE}./rh frontend start${NC}"
    echo -e "  ${BLUE}./rh frontend test${NC}"
    echo -e "  ${BLUE}./rh docs start${NC}"
    echo -e "  ${BLUE}./rh worker start${NC}"
    echo ""
}

# Function to start backend
start_backend() {
    echo -e "${GREEN}üîß Starting Rhesis Backend...${NC}"
    cd "$SCRIPT_DIR/apps/backend" || {
        echo -e "${RED}‚ùå Error: Backend directory not found${NC}"
        exit 1
    }

    if [ -f "start.sh" ]; then
        ./start.sh
    else
        echo -e "${RED}‚ùå Error: Backend start.sh not found${NC}"
        exit 1
    fi
}

# Function to start frontend
start_frontend() {
    echo -e "${GREEN}üåê Starting Rhesis Frontend...${NC}"
    cd "$SCRIPT_DIR/apps/frontend" || {
        echo -e "${RED}‚ùå Error: Frontend directory not found${NC}"
        exit 1
    }

    if [ -f "start.sh" ]; then
        ./start.sh
    else
        echo -e "${RED}‚ùå Error: Frontend start.sh not found${NC}"
        exit 1
    fi
}

# Function to start docs
start_docs() {
    echo -e "${GREEN}üìö Starting Rhesis Documentation...${NC}"
    cd "$SCRIPT_DIR/docs/src" || {
        echo -e "${RED}‚ùå Error: Documentation directory not found${NC}"
        exit 1
    }

    if [ -f "start.sh" ]; then
        ./start.sh
    else
        echo -e "${RED}‚ùå Error: Docs start.sh not found${NC}"
        exit 1
    fi
}

# Function to start worker
start_worker() {
    echo -e "${GREEN}‚öôÔ∏è  Starting Rhesis Worker...${NC}"
    
    # Kill any existing celery workers first
    echo -e "${YELLOW}üîç Checking for existing Celery workers...${NC}"
    if pgrep -f celery > /dev/null; then
        echo -e "${YELLOW}üõë Stopping existing Celery workers...${NC}"
        pkill -9 -f celery
        sleep 1
        echo -e "${GREEN}‚úÖ Existing workers stopped${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  No existing workers found${NC}"
    fi
    
    # Clear Python cache
    echo -e "${YELLOW}üßπ Clearing Python cache...${NC}"
    cd "$SCRIPT_DIR" || {
        echo -e "${RED}‚ùå Error: Script directory not found${NC}"
        exit 1
    }
    find apps/backend -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null
    find apps/backend -type f -name "*.pyc" -delete 2>/dev/null
    echo -e "${GREEN}‚úÖ Cache cleared${NC}"
    
    cd "$SCRIPT_DIR/apps/backend" || {
        echo -e "${RED}‚ùå Error: Backend directory not found${NC}"
        exit 1
    }

    LOG_FILE="$SCRIPT_DIR/celery.log"
    echo -e "${GREEN}üöÄ Starting new Celery worker...${NC}"
    echo -e "${BLUE}üìù Logs will be written to: ${LOG_FILE}${NC}"
    echo -e "${YELLOW}üí° Press Ctrl+C to stop the worker${NC}"
    echo ""
    
    # Set up trap to handle Ctrl+C gracefully
    trap "echo -e '\n${YELLOW}üõë Shutting down worker...${NC}'; exit" INT TERM
    
    # Run in foreground - using uv run handles the virtual environment automatically
    # Using --logfile parameter to write logs directly
    # Using --pool=solo to avoid forking issues on macOS with ML libraries (DeepEval/PyTorch)
    exec uv run celery -A rhesis.backend.worker worker --loglevel=DEBUG -Q celery,execution --pool=solo --logfile="$LOG_FILE"
}

# Function to run frontend tests
test_frontend() {
    echo -e "${GREEN}üß™ Running Frontend Tests...${NC}"
    cd "$SCRIPT_DIR/apps/frontend" || {
        echo -e "${RED}‚ùå Error: Frontend directory not found${NC}"
        exit 1
    }

    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}üì¶ Installing dependencies first...${NC}"
        npm install || {
            echo -e "${RED}‚ùå Error: Failed to install dependencies${NC}"
            exit 1
        }
    fi

    # Run tests
    echo -e "${BLUE}üß™ Executing tests...${NC}"
    npm test || {
        echo -e "${RED}‚ùå Error: Tests failed${NC}"
        exit 1
    }

    echo -e "${GREEN}‚úÖ Frontend tests completed!${NC}"
}

# Parse command line arguments
case "$1" in
    "backend")
        case "$2" in
            "start")
                start_backend
                ;;
            *)
                echo -e "${RED}‚ùå Unknown backend command: $2${NC}"
                echo -e "${YELLOW}Use: ./rh backend start${NC}"
                exit 1
                ;;
        esac
        ;;
    "frontend")
        case "$2" in
            "start")
                start_frontend
                ;;
            "test")
                test_frontend
                ;;
            *)
                echo -e "${RED}‚ùå Unknown frontend command: $2${NC}"
                echo -e "${YELLOW}Use: ./rh frontend start or ./rh frontend test${NC}"
                exit 1
                ;;
        esac
        ;;
    "docs")
        case "$2" in
            "start")
                start_docs
                ;;
            *)
                echo -e "${RED}‚ùå Unknown docs command: $2${NC}"
                echo -e "${YELLOW}Use: ./rh docs start${NC}"
                exit 1
                ;;
        esac
        ;;
    "worker")
        case "$2" in
            "start")
                start_worker
                ;;
            *)
                echo -e "${RED}‚ùå Unknown worker command: $2${NC}"
                echo -e "${YELLOW}Use: ./rh worker start${NC}"
                exit 1
                ;;
        esac
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
