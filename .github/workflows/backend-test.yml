name: 🧪 Backend Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'tests/backend/**'
      - 'sdk/**'
      - '.github/workflows/backend-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'tests/backend/**'
      - 'sdk/**'
      - '.github/workflows/backend-test.yml'
  workflow_dispatch:

env:
  # Database Configuration (local test database)
  POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  # Stage 1: Fast Unit Tests (< 2 minutes)
  unit-tests:
    name: 🧩 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-backend-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-backend-

      - name: Install dependencies
        run: |
          cd apps/backend
          uv sync --dev

      - name: Verify SDK installation
        run: |
          cd apps/backend
          uv pip show rhesis-sdk

      - name: Run unit tests
        env:
          # Test mode configuration
          SQLALCHEMY_DB_MODE: test
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          LOG_LEVEL: ${{ secrets.TEST_LOG_LEVEL }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # AI services configuration
          AZURE_OPENAI_API_KEY: ${{ secrets.TEST_AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.TEST_AZURE_OPENAI_API_VERSION }}
          GEMINI_API_KEY: ${{ secrets.TEST_GEMINI_API_KEY }}
          GEMINI_MODEL_NAME: ${{ secrets.TEST_GEMINI_MODEL_NAME }}
          
          # Auth configuration
          AUTH0_DOMAIN: ${{ secrets.TEST_AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ secrets.TEST_AUTH0_AUDIENCE }}
          AUTH0_CLIENT_ID: ${{ secrets.TEST_AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.TEST_AUTH0_CLIENT_SECRET }}
          AUTH0_SECRET_KEY: ${{ secrets.TEST_AUTH0_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.TEST_JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.TEST_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          
          # Other services configuration
          FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
          SMTP_HOST: ${{ secrets.TEST_SMTP_HOST }}
          SMTP_PORT: ${{ secrets.TEST_SMTP_PORT }}
          SMTP_USER: ${{ secrets.TEST_SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.TEST_SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.TEST_FROM_EMAIL }}
        run: |
          cd apps/backend
          uv run pytest -m "unit and critical" --maxfail=5 --tb=short -v --durations=10

  # Stage 2: Integration & Security Tests (< 5 minutes)
  integration-tests:
    name: 🔗 Integration & Security Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-backend-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-backend-

      - name: Install dependencies
        run: |
          cd apps/backend
          uv sync --dev

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Verify database connection
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -c "SELECT version();"

      - name: Run database migrations
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
        run: |
          cd apps/backend
          uv run alembic upgrade head

      - name: Verify database structure
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -c "\dt"

      - name: Setup test data
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          LOG_LEVEL: WARNING
        run: |
          cd apps/backend
          uv run python -c "
          import sys
          sys.path.append('src')
          from tests.backend.fixtures.test_setup import setup_test_environment
          setup_test_environment()
          print('✅ Test environment setup completed')
          "

      - name: Run integration tests
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          BROKER_URL: ${{ secrets.TEST_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.TEST_CELERY_RESULT_BACKEND }}
          
          # Application configuration
          LOG_LEVEL: ${{ secrets.TEST_LOG_LEVEL }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # AI services configuration
          AZURE_OPENAI_API_KEY: ${{ secrets.TEST_AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.TEST_AZURE_OPENAI_API_VERSION }}
          GEMINI_API_KEY: ${{ secrets.TEST_GEMINI_API_KEY }}
          GEMINI_MODEL_NAME: ${{ secrets.TEST_GEMINI_MODEL_NAME }}
          
          # Auth configuration
          AUTH0_DOMAIN: ${{ secrets.TEST_AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ secrets.TEST_AUTH0_AUDIENCE }}
          AUTH0_CLIENT_ID: ${{ secrets.TEST_AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.TEST_AUTH0_CLIENT_SECRET }}
          AUTH0_SECRET_KEY: ${{ secrets.TEST_AUTH0_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.TEST_JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.TEST_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          
          # Other services configuration
          FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
          SMTP_HOST: ${{ secrets.TEST_SMTP_HOST }}
          SMTP_PORT: ${{ secrets.TEST_SMTP_PORT }}
          SMTP_USER: ${{ secrets.TEST_SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.TEST_SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.TEST_FROM_EMAIL }}
        run: |
          cd apps/backend
          uv run pytest -m "integration and not slow" --maxfail=3 -v --durations=10

      - name: Run security tests
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          REDIS_URL: redis://localhost:6379
          
          # Application configuration
          LOG_LEVEL: WARNING
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # Mock services
          AUTH0_DOMAIN: mock-domain.auth0.com
          AUTH0_AUDIENCE: mock-audience
          JWT_SECRET_KEY: mock-jwt-secret-key-for-testing-only
          JWT_ALGORITHM: HS256
        run: |
          cd apps/backend
          uv run pytest -m "security" --maxfail=2 -v --durations=10

  # Stage 3: Comprehensive Tests (only on main branch)
  comprehensive-tests:
    name: 🐌 Comprehensive Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-backend-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-backend-

      - name: Install dependencies
        run: |
          cd apps/backend
          uv sync --dev

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
        run: |
          cd apps/backend
          uv run alembic upgrade head

      - name: Setup test data
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          LOG_LEVEL: WARNING
        run: |
          cd apps/backend
          uv run python -c "
          import sys
          sys.path.append('src')
          from tests.backend.fixtures.test_setup import setup_test_environment
          setup_test_environment()
          print('✅ Test environment setup completed')
          "

      - name: Run slow tests
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          BROKER_URL: ${{ secrets.TEST_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.TEST_CELERY_RESULT_BACKEND }}
          
          # Application configuration
          LOG_LEVEL: ${{ secrets.TEST_LOG_LEVEL }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # AI services configuration
          AZURE_OPENAI_API_KEY: ${{ secrets.TEST_AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.TEST_AZURE_OPENAI_API_VERSION }}
          GEMINI_API_KEY: ${{ secrets.TEST_GEMINI_API_KEY }}
          GEMINI_MODEL_NAME: ${{ secrets.TEST_GEMINI_MODEL_NAME }}
          
          # Auth configuration
          AUTH0_DOMAIN: ${{ secrets.TEST_AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ secrets.TEST_AUTH0_AUDIENCE }}
          AUTH0_CLIENT_ID: ${{ secrets.TEST_AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.TEST_AUTH0_CLIENT_SECRET }}
          AUTH0_SECRET_KEY: ${{ secrets.TEST_AUTH0_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.TEST_JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.TEST_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          
          # Other services configuration
          FRONTEND_URL: ${{ secrets.TEST_FRONTEND_URL }}
          SMTP_HOST: ${{ secrets.TEST_SMTP_HOST }}
          SMTP_PORT: ${{ secrets.TEST_SMTP_PORT }}
          SMTP_USER: ${{ secrets.TEST_SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.TEST_SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.TEST_FROM_EMAIL }}
        run: |
          cd apps/backend
          uv run pytest -m "slow" --maxfail=1 --tb=short -v --durations=10

      - name: Run AI tests (with mocked services)
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          
          # Application configuration
          LOG_LEVEL: WARNING
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # Mock AI services (no real API calls in CI)
          AZURE_OPENAI_API_KEY: mock-azure-key-for-testing
          AZURE_OPENAI_ENDPOINT: https://mock-endpoint.openai.azure.com
          AZURE_OPENAI_DEPLOYMENT_NAME: mock-deployment
          AZURE_OPENAI_API_VERSION: 2024-02-01
          GEMINI_API_KEY: mock-gemini-key-for-testing
          GEMINI_MODEL_NAME: gemini-1.5-flash
          
          # Mock Auth configuration
          AUTH0_DOMAIN: mock-domain.auth0.com
          AUTH0_AUDIENCE: mock-audience
          JWT_SECRET_KEY: mock-jwt-secret-key-for-testing-only
          JWT_ALGORITHM: HS256
        run: |
          cd apps/backend
          uv run pytest -m "ai" --maxfail=1 --tb=short -v --durations=10

  # Coverage reporting
  coverage:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-backend-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-backend-

      - name: Install dependencies
        run: |
          cd apps/backend
          uv sync --dev

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
        run: |
          cd apps/backend
          uv run alembic upgrade head

      - name: Setup test data
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          LOG_LEVEL: WARNING
        run: |
          cd apps/backend
          uv run python -c "
          import sys
          sys.path.append('src')
          from tests.backend.fixtures.test_setup import setup_test_environment
          setup_test_environment()
          print('✅ Test environment setup completed')
          "

      - name: Generate coverage report
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.TEST_SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.TEST_SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ env.POSTGRES_USER }}
          SQLALCHEMY_DB_PASS: ${{ env.POSTGRES_PASSWORD }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ env.POSTGRES_DB }}
          
          # Application configuration
          LOG_LEVEL: WARNING
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # Mock AI services
          AZURE_OPENAI_API_KEY: mock-azure-key-for-testing
          GEMINI_API_KEY: mock-gemini-key-for-testing
          
          # Mock Auth configuration
          AUTH0_DOMAIN: mock-domain.auth0.com
          JWT_SECRET_KEY: mock-jwt-secret-key-for-testing-only
          JWT_ALGORITHM: HS256
        run: |
          cd apps/backend
          uv run pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing -m "not slow" -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/backend/coverage.xml
          flags: backend
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            apps/backend/coverage.xml
            apps/backend/htmlcov/
          retention-days: 30
