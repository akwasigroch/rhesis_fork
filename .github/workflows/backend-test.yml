name: üß™ Backend Testing

on:
  workflow_dispatch:
    inputs:
      test_markers:
        description: 'Test markers to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'unit'
          - 'integration'
          - 'slow'
          - 'ai'
          - 'critical'
          - 'security'
          - 'unit,critical'
          - 'integration,security'
          - 'custom'
      custom_markers:
        description: 'Custom marker expression (only if "custom" is selected above)'
        required: false
        default: ''
        type: string
      run_coverage:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean

env:
  # Database Configuration (local test database)
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  # Dynamic test execution based on selected markers
  test:
    name: üß™ Backend Tests (${{ inputs.test_markers == 'custom' && inputs.custom_markers || inputs.test_markers }})
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.17'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-backend-${{ hashFiles('apps/backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-backend-

      - name: Install dependencies
        run: |
          cd apps/backend
          uv sync --dev

      - name: Verify SDK installation
        run: |
          cd apps/backend
          uv pip show rhesis-sdk

      - name: Install PostgreSQL client
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Create test database and user
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        env:
          PGPASSWORD: ${{ secrets.SQLALCHEMY_DB_PASS }}
          DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
          DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
        run: |
          echo "üîó Setting up test database and user..."
          echo "üîç Debug: Checking environment variables..."
          echo "Database: '$DB_NAME'"
          echo "User: '$DB_USER'"
          echo "Host: localhost:5432"
          echo "Password length: ${#PGPASSWORD}"
          
          # Test PostgreSQL service availability first
          echo "üîç Testing PostgreSQL service..."
          pg_isready -h localhost -p 5432 -U postgres || {
            echo "‚ùå PostgreSQL service not ready"
            exit 1
          }
          
          # Connect as postgres user to create database and user
          echo "üîç Creating database and user..."
          
          # Create user first
          PGPASSWORD='' psql -h localhost -U postgres -d postgres -c "
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = '$DB_USER') THEN
                CREATE USER \"$DB_USER\" WITH PASSWORD '$PGPASSWORD';
              END IF;
            END
            \$\$;
          " || {
            echo "‚ùå Failed to create user"
            exit 1
          }
          
          # Create database
          PGPASSWORD='' psql -h localhost -U postgres -d postgres -c "
            SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'
          " | grep -q 1 || {
            echo "Creating database $DB_NAME..."
            PGPASSWORD='' createdb -h localhost -U postgres -O "$DB_USER" "$DB_NAME" || {
              echo "‚ùå Failed to create database"
              exit 1
            }
          }
          
          # Grant privileges
          PGPASSWORD='' psql -h localhost -U postgres -d postgres -c "
            GRANT ALL PRIVILEGES ON DATABASE \"$DB_NAME\" TO \"$DB_USER\";
          " || {
            echo "‚ùå Failed to grant privileges"
            exit 1
          }
          
          # List all databases to verify creation
          echo "üîç Listing all databases after creation..."
          PGPASSWORD='' psql -h localhost -U postgres -d postgres -c "SELECT datname FROM pg_database;" || echo "Failed to list databases"
          
          # Test connection to new database
          echo "üîç Testing connection to database: $DB_NAME"
          psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c 'SELECT version();' && echo "‚úÖ Database connection verified" || {
            echo "‚ùå Database connection failed"
            exit 1
          }

      - name: Run database migrations
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ secrets.SQLALCHEMY_DB_USER }}:${{ secrets.SQLALCHEMY_DB_PASS }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ secrets.SQLALCHEMY_DB_NAME }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
          SQLALCHEMY_DB_PASS: ${{ secrets.SQLALCHEMY_DB_PASS }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
        run: |
          cd apps/backend/src/rhesis/backend
          uv run alembic upgrade head

      - name: Verify database structure
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        env:
          PGPASSWORD: ${{ secrets.SQLALCHEMY_DB_PASS }}
          DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
          DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
        run: |
          echo "üîç Verifying database structure..."
          timeout 30 psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "
            SELECT 
              schemaname, 
              tablename, 
              tableowner 
            FROM pg_tables 
            WHERE schemaname = 'public' 
            ORDER BY tablename;
          " || {
            echo "‚ö†Ô∏è  Database verification timed out, but continuing..."
            echo "üîç Quick table count check:"
            psql -h localhost -U "$DB_USER" -d "$DB_NAME" -c "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public';"
          }
          echo "‚úÖ Database verification completed"

      - name: Setup test data
        if: ${{ inputs.test_markers != 'unit' || inputs.test_markers == 'all' || contains(inputs.test_markers, 'integration') || contains(inputs.test_markers, 'slow') || contains(inputs.test_markers, 'security') || inputs.test_markers == 'custom' }}
        id: setup_env
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ secrets.SQLALCHEMY_DB_USER }}:${{ secrets.SQLALCHEMY_DB_PASS }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ secrets.SQLALCHEMY_DB_NAME }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
          SQLALCHEMY_DB_PASS: ${{ secrets.SQLALCHEMY_DB_PASS }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          LOG_LEVEL: WARNING
        run: |
          cd apps/backend
          export PYTHONPATH="${{ github.workspace }}/apps/backend/src:${{ github.workspace }}/tests:$PYTHONPATH"
          echo "üöÄ Setting up test environment..."
          
          # Setup test environment and capture API token
          API_TOKEN=$(timeout 300 uv run python -c "
          import os
          from backend.fixtures.test_setup import setup_test_environment
          setup_test_environment()
          print(os.environ.get('RHESIS_API_KEY', ''))
          " | tail -1) || {
            echo "‚ö†Ô∏è  Test setup timed out after 5 minutes"
            exit 1
          }
          
          # Export the API token for subsequent steps
          echo "RHESIS_API_KEY=${API_TOKEN}" >> $GITHUB_OUTPUT
          echo "üîë API token captured: ${API_TOKEN}"

      - name: Determine pytest command
        id: pytest_cmd
        run: |
          if [ "${{ inputs.test_markers }}" = "all" ]; then
            echo "cmd=uv run --project apps/backend python -m pytest tests/backend -v --durations=10" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.test_markers }}" = "custom" ]; then
            echo "cmd=uv run --project apps/backend python -m pytest tests/backend -m \"${{ inputs.custom_markers }}\" -v --durations=10" >> $GITHUB_OUTPUT
          else
            echo "cmd=uv run --project apps/backend python -m pytest tests/backend -m \"${{ inputs.test_markers }}\" -v --durations=10" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ secrets.SQLALCHEMY_DB_USER }}:${{ secrets.SQLALCHEMY_DB_PASS }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ secrets.SQLALCHEMY_DB_NAME }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
          SQLALCHEMY_DB_PASS: ${{ secrets.SQLALCHEMY_DB_PASS }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
          BROKER_URL: ${{ secrets.BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          
          # Application configuration
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src:${{ github.workspace }}
          
          # AI services configuration
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL_NAME: ${{ secrets.GEMINI_MODEL_NAME }}
          
          # Auth configuration
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
          AUTH0_SECRET_KEY: ${{ secrets.AUTH0_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          
          # Other services configuration
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          
          # Test-generated API key
          RHESIS_API_KEY: ${{ steps.setup_env.outputs.RHESIS_API_KEY }}
        run: |
          # Run tests from repository root with proper PYTHONPATH
          export PYTHONPATH="${{ github.workspace }}/apps/backend/src:${{ github.workspace }}:$PYTHONPATH"
          ${{ steps.pytest_cmd.outputs.cmd }}

      - name: Generate coverage report
        if: ${{ inputs.run_coverage == true }}
        env:
          SQLALCHEMY_DB_MODE: ${{ secrets.SQLALCHEMY_DB_MODE }}
          SQLALCHEMY_DATABASE_TEST_URL: postgresql://${{ secrets.SQLALCHEMY_DB_USER }}:${{ secrets.SQLALCHEMY_DB_PASS }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ secrets.SQLALCHEMY_DB_NAME }}
          SQLALCHEMY_DB_DRIVER: ${{ secrets.SQLALCHEMY_DB_DRIVER }}
          SQLALCHEMY_DB_USER: ${{ secrets.SQLALCHEMY_DB_USER }}
          SQLALCHEMY_DB_PASS: ${{ secrets.SQLALCHEMY_DB_PASS }}
          SQLALCHEMY_DB_HOST: ${{ env.POSTGRES_HOST }}
          SQLALCHEMY_DB_NAME: ${{ secrets.SQLALCHEMY_DB_NAME }}
          
          # Application configuration
          LOG_LEVEL: WARNING
          PYTHONPATH: ${{ github.workspace }}/apps/backend/src
          
          # Mock AI services
          AZURE_OPENAI_API_KEY: mock-azure-key-for-testing
          GEMINI_API_KEY: mock-gemini-key-for-testing
          
          # Mock Auth configuration
          AUTH0_DOMAIN: mock-domain.auth0.com
          JWT_SECRET_KEY: mock-jwt-secret-key-for-testing-only
          JWT_ALGORITHM: HS256
          
          # Test-generated API key
          RHESIS_API_KEY: ${{ steps.setup_env.outputs.RHESIS_API_KEY }}
        run: |
          # Run coverage from repository root with proper PYTHONPATH
          export PYTHONPATH="${{ github.workspace }}/apps/backend/src:${{ github.workspace }}:$PYTHONPATH"
          
          # Use uv run with project specification to run pytest from root
          if [ "${{ inputs.test_markers }}" = "all" ]; then
            uv run --project apps/backend python -m pytest tests/backend --cov=apps/backend/src --cov-report=xml --cov-report=html --cov-report=term-missing -v
          elif [ "${{ inputs.test_markers }}" = "custom" ]; then
            uv run --project apps/backend python -m pytest tests/backend --cov=apps/backend/src --cov-report=xml --cov-report=html --cov-report=term-missing -m "${{ inputs.custom_markers }}" -v
          else
            uv run --project apps/backend python -m pytest tests/backend --cov=apps/backend/src --cov-report=xml --cov-report=html --cov-report=term-missing -m "${{ inputs.test_markers }}" -v
          fi

      - name: Upload coverage to Codecov
        if: ${{ inputs.run_coverage == true }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage reports as artifacts
        if: ${{ inputs.run_coverage == true }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30
