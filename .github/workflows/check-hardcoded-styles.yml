name: Check Hardcoded Styles

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/src/**/*.ts'
      - 'apps/frontend/src/**/*.tsx'
      - 'apps/frontend/src/**/*.js'
      - 'apps/frontend/src/**/*.jsx'

jobs:
  check-styles:
    runs-on: ubuntu-latest
    name: Check for hardcoded styles

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch more commits for git diff to work properly
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Make script executable
        run: chmod +x scripts/check-hardcoded-styles.js

      - name: Run hardcoded styles check
        run: node scripts/check-hardcoded-styles.js
        env:
          # Set environment to indicate we're in a CI context
          CI: true

      - name: Comment on PR (if violations found)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Create a custom script to parse violations into structured data
            const parseScript = `
            const StyleChecker = require('./scripts/check-hardcoded-styles.js');
            const checker = new StyleChecker();
            
            // Override generateReport to return structured data instead of console output
            checker.generateReport = function() {
              if (this.violations.length === 0) {
                return { hasViolations: false, summary: 'No violations found' };
              }
              
              const violationsByFile = {};
              this.violations.forEach(violation => {
                if (!violationsByFile[violation.file]) {
                  violationsByFile[violation.file] = [];
                }
                violationsByFile[violation.file].push(violation);
              });
              
              const violationsByType = {};
              this.violations.forEach(violation => {
                violationsByType[violation.type] = (violationsByType[violation.type] || 0) + 1;
              });
              
              return {
                hasViolations: true,
                totalViolations: this.violations.length,
                checkedFiles: this.checkedFiles,
                violationsByFile,
                violationsByType
              };
            };
            
            // Get command line arguments (files to check)
            const targetFiles = process.argv.slice(2);
            checker.run(targetFiles);
            `;
            
            // Write and execute the parsing script
            fs.writeFileSync('parse-violations.js', parseScript);
            
            let violations = null;
            try {
              const result = execSync('node parse-violations.js', { 
                encoding: 'utf8',
                stdio: 'pipe'
              });
            } catch (error) {
              // The script will exit with code 1 if violations found
              // We need to capture the violations data differently
            }
            
            // Alternative approach: run the original script and parse its output
            let output = '';
            try {
              execSync('node scripts/check-hardcoded-styles.js', { 
                encoding: 'utf8',
                stdio: 'pipe'
              });
            } catch (error) {
              output = error.stdout || error.message;
            }
            
            // Parse the output to extract key information
            const lines = output.split('\n');
            const violationLines = lines.filter(line => line.includes('Found') && line.includes('violations'));
            const fileLines = lines.filter(line => line.startsWith('üìÑ'));
            const summaryLines = lines.filter(line => line.includes('violations') && line.includes(':'));
            
            let totalViolations = 0;
            let checkedFiles = 0;
            
            // Extract numbers from output
            const violationMatch = output.match(/Found (\d+) hardcoded style violations/);
            const filesMatch = output.match(/Checked (\d+) files/);
            
            if (violationMatch) totalViolations = parseInt(violationMatch[1]);
            if (filesMatch) checkedFiles = parseInt(filesMatch[1]);
            
            // Create a more readable comment
            let filesList = '';
            if (fileLines.length > 0) {
              filesList = fileLines.slice(0, 10).map(line => {
                const fileName = line.replace('üìÑ ', '').replace(':', '');
                return `- \`${fileName}\``;
              }).join('\n');
              
              if (fileLines.length > 10) {
                filesList += `\n- ... and ${fileLines.length - 10} more files`;
              }
            }
            
            const comment = `## üé® Hardcoded Styles Check Failed
            
            This PR contains **${totalViolations} hardcoded style violations** across **${fileLines.length} files**.
            
            ### üìÅ Files with violations:
            ${filesList}
            
            <details>
            <summary>üìã Click to see detailed violations</summary>
            
            \`\`\`
            ${output.length > 4000 ? output.substring(0, 4000) + '\n\n... (output truncated, run locally for full details)' : output}
            \`\`\`
            
            </details>
            
            ### üîß How to fix these violations:
            
            #### 1. **Colors** ‚Üí Use theme palette
            \`\`\`tsx
            // ‚ùå Hardcoded
            sx={{ color: '#50B9E0', backgroundColor: '#f5f5f5' }}
            
            // ‚úÖ Theme-based  
            sx={{ color: 'primary.main', backgroundColor: 'grey.100' }}
            \`\`\`
            
            #### 2. **Spacing** ‚Üí Use theme spacing
            \`\`\`tsx
            // ‚ùå Hardcoded
            sx={{ margin: '16px', padding: '24px' }}
            
            // ‚úÖ Theme-based
            sx={{ m: 2, p: 3 }} // 2 * 8px = 16px, 3 * 8px = 24px
            \`\`\`
            
            #### 3. **Border Radius** ‚Üí Use consistent values
            \`\`\`tsx
            // ‚ùå Hardcoded
            sx={{ borderRadius: '8px' }}
            
            // ‚úÖ Consistent
            sx={{ borderRadius: 1 }} // 1 * 4px = 4px (MUI default)
            \`\`\`
            
            #### 4. **Font Sizes** ‚Üí Use Typography variants
            \`\`\`tsx
            // ‚ùå Hardcoded
            sx={{ fontSize: '14px' }}
            
            // ‚úÖ Typography variant
            <Typography variant="body2">Text</Typography>
            \`\`\`
            
            ### üìñ Resources:
            - [Theme Usage Guide](apps/frontend/src/styles/rhesis-theme-usage.md)
            - [MUI System Props](https://mui.com/system/properties/)
            - Run \`node scripts/check-hardcoded-styles.js\` locally for full details
            
            ---
            *This check helps maintain consistent design across the application. Fix the violations above to pass the check.* ‚ú®`;
            
            // Clean up temporary file
            try {
              fs.unlinkSync('parse-violations.js');
            } catch (e) {}
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
